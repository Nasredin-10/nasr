// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!)
const firebaseConfig = {
    apiKey: "–í–ê–®_API_KEY",
    authDomain: "–í–ê–®_PROJECT.firebaseapp.com",
    databaseURL: "https://–í–ê–®_PROJECT.firebaseio.com",
    projectId: "–í–ê–®_PROJECT",
    storageBucket: "–í–ê–®_PROJECT.appspot.com",
    messagingSenderId: "–í–ê–®_SENDER_ID",
    appId: "–í–ê–®_APP_ID"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameId = "duel1"; // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
let playerId = Math.random().toString(36).substr(2, 9); // –†–∞–Ω–¥–æ–º–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞
let playerNumber = null; // 1 –∏–ª–∏ 2

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
function joinGame() {
    const gameRef = database.ref(`games/${gameId}`);

    gameRef.once("value").then((snapshot) => {
        const gameData = snapshot.val();

        if (!gameData) {
            // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
            playerNumber = 1;
            gameRef.set({
                player1: { id: playerId, score: 0 },
                player2: null,
                winner: null,
            });
        } else if (!gameData.player2) {
            // –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
            playerNumber = 2;
            gameRef.update({
                player2: { id: playerId, score: 0 },
            });
        } else {
            alert("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!");
            return;
        }

        updateUI();
        startGameListener();
    });
}

// –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
function clickButton(playerNum) {
    if (playerNum !== playerNumber) return; // –ù–µ –¥–∞—ë–º –∫–ª–∏–∫–∞—Ç—å –∑–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞

    const playerKey = `player${playerNumber}`;
    const playerRef = database.ref(`games/${gameId}/${playerKey}/score`);

    playerRef.transaction((currentScore) => {
        return (currentScore || 0) + 1;
    });

    // –ó–≤—É–∫ –∫–ª–∏–∫–∞ (–¥–æ–±–∞–≤—å –∑–≤—É–∫ –≤ –ø–∞–ø–∫—É sounds)
    const clickSound = new Audio("sounds/click.mp3");
    clickSound.play();
}

// –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–≥—Ä–µ
function startGameListener() {
    const gameRef = database.ref(`games/${gameId}`);

    gameRef.on("value", (snapshot) => {
        const gameData = snapshot.val();
        if (!gameData) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç
        if (gameData.player1) {
            document.querySelector("#player1 .score").textContent = gameData.player1.score;
        }
        if (gameData.player2) {
            document.querySelector("#player2 .score").textContent = gameData.player2.score;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
        if (gameData.winner) {
            const winner = gameData.winner;
            const status = document.getElementById("status");
            if (winner === playerNumber) {
                status.textContent = "–¢—ã –ø–æ–±–µ–¥–∏–ª! üéÜ";
                new Audio("sounds/win.mp3").play();
            } else {
                status.textContent = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª... üò¢";
            }
            disableButtons();
        }

        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        document.getElementById("player1").classList.toggle("active", playerNumber === 1);
        document.getElementById("player2").classList.toggle("active", playerNumber === 2);
    });
}

// –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
function disableButtons() {
    document.querySelectorAll(".click-btn").forEach(btn => {
        btn.disabled = true;
    });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
function updateUI() {
    const status = document.getElementById("status");
    status.textContent = playerNumber === 1 ? "–ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞..." : "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ö–ª–∏–∫–∞–π –±—ã—Å—Ç—Ä–µ–µ!";
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.onload = joinGame;
