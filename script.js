// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase (–∑–∞–º–µ–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–≤–æ–∏ –∏–∑ Firebase Console!)
const firebaseConfig = {
  apiKey: "AIzaSyAftE7aN_6PWAo6nxcisz5rrFk67jt2n-k",
  authDomain: "game-649c1.firebaseapp.com",
  databaseURL: "https://game-649c1-default-rtdb.europe-west1.firebasedatabase.app",
  projectId: "game-649c1",
  storageBucket: "game-649c1.firebasestorage.app",
  messagingSenderId: "177082622080",
  appId: "1:177082622080:web:2d522421fe30a3dda70665"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameId = "duel1"; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä—ã
let playerId = Math.random().toString(36).substr(2, 9); // –°–ª—É—á–∞–π–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞
let playerNumber = null; // 1 –∏–ª–∏ 2

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
function joinGame() {
  const gameRef = database.ref(`games/${gameId}`);

  gameRef.once("value").then((snapshot) => {
    const gameData = snapshot.val();

    if (!gameData) {
      // –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
      playerNumber = 1;
      gameRef.set({
        player1: { id: playerId, score: 0 },
        player2: null,
        winner: null,
      });
    } else if (!gameData.player2) {
      // –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫
      playerNumber = 2;
      gameRef.update({
        player2: { id: playerId, score: 0 },
      });
    } else {
      alert("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!");
      return;
    }

    updateUI();
    startGameListener();
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
function clickButton(playerNum) {
  if (playerNum !== playerNumber) return;

  const playerKey = `player${playerNumber}`;
  const playerRef = database.ref(`games/${gameId}/${playerKey}/score`);

  playerRef.transaction((currentScore) => {
    return (currentScore || 0) + 1;
  });

  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∫–ª–∏–∫–∞
  const clickSound = new Audio("sounds/click.mp3");
  clickSound.play().catch(e => console.log("–ó–≤—É–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω:", e));
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∏–≥—Ä–µ
function startGameListener() {
  const gameRef = database.ref(`games/${gameId}`);

  gameRef.on("value", (snapshot) => {
    const gameData = snapshot.val();
    if (!gameData) return;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç–∞
    if (gameData.player1) {
      document.querySelector("#player1 .score").textContent = gameData.player1.score;
    }
    if (gameData.player2) {
      document.querySelector("#player2 .score").textContent = gameData.player2.score;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã (–ø–µ—Ä–≤—ã–π –¥–æ 50)
    if (gameData.player1?.score >= 50 || gameData.player2?.score >= 50) {
      const winner = gameData.player1?.score >= 50 ? 1 : 2;
      gameRef.update({ winner });

      const status = document.getElementById("status");
      if (winner === playerNumber) {
        status.textContent = "–¢—ã –ø–æ–±–µ–¥–∏–ª! üéâ";
        new Audio("sounds/win.mp3").play().catch(e => console.log(e));
      } else {
        status.textContent = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª... üò¢";
      }
      disableButtons();
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    document.getElementById("player1").classList.toggle("active", playerNumber === 1);
    document.getElementById("player2").classList.toggle("active", playerNumber === 2);
  });
}

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
function disableButtons() {
  document.querySelectorAll(".click-btn").forEach(btn => {
    btn.disabled = true;
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
  const status = document.getElementById("status");
  status.textContent = playerNumber === 1 
    ? "–ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞..." 
    : "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ö–ª–∏–∫–∞–π –±—ã—Å—Ç—Ä–µ–µ!";
}

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.onload = joinGame;
